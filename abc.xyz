
def group_images_by_house(folder_path):
    house_dict = defaultdict(list)
    for file in os.listdir(folder_path):
        name, ext = os.path.splitext(file)
        if ext.lower() in SUPPORTED_EXTENSIONS:
            parts = name.split("_")
            if len(parts) == 2 and parts[0].isdigit():
                house_id = parts[0]
                house_dict[house_id].append(os.path.join(folder_path, file))
    return house_dict


def load_image(image_path):
    try:
        return Image.open(image_path).convert("RGB")
    except Exception as e:
        print(f"Error loading {image_path}: {e}")
        return None


def get_model():
    return Ollama(model="llama3:vision")


def create_prompt():
    return "Extract structured information from this image in JSON format."


def run_single_image_inference(image, model):
    prompt = create_prompt()
    message = HumanMessage(content=[
        {"type": "text", "text": prompt},
        {"type": "image", "image": image}
    ])
    result = model.invoke([message])
    try:
        return json.loads(result)
    except Exception as e:
        print(f"Error parsing response to JSON: {e}")
        return {}


def merge_json_list(json_list):
    final = {}
    for entry in json_list:
        for key, value in entry.items():
            if key not in final or final[key] is None:
                final[key] = value
            elif final[key] != value and value is not None:
                raise ValueError(f"Conflict detected for field '{key}': '{final[key]}' vs '{value}'")
    return final


def process_house_images(house_id, image_paths, model):
    house_jsons = []
    for path in image_paths:
        image = load_image(path)
        if image:
            result_json = run_single_image_inference(image, model)
            house_jsons.append(result_json)

    try:
        final_json = merge_json_list(house_jsons)
        print(f"\n✅ Final JSON for House {house_id}:\n{json.dumps(final_json, indent=2)}")
    except ValueError as e:
        print(f"\n❌ Conflict in House {house_id}: {e}")


def main():
    model = get_model()
    houses = group_images_by_house(IMAGE_FOLDER)
    print(f"Found {len(houses)} houses.")

    for house_id, image_paths in houses.items():
        if len(image_paths) != 4:
            print(f"Skipping house {house_id} (has {len(image_paths)} images)")
            continue
        process_house_images(house_id, image_paths, model)


if __name__ == "__main__":
    main()
